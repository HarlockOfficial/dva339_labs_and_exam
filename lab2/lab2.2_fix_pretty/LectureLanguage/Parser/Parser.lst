
// ==========================================================================
//  GPPG error listing for yacc source file <.\Parser.y - 11/24/2020 11:48:31 AM>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  DESKTOP-64EK7A4
//  DateTime: 11/24/2020 11:48:35 AM
//  UserName: dhn03
// ==========================================================================


%output=Generated/Parser.cs
%namespace Parser

%union {
	public string Value;
	public Expression Expression;
}

%token <Value> ID
%token <Value> NUM
%token <Value> LEXERR

%token LET "let"
%token IN "in"

%token ASN "="
%token ADD "+"
%token SUB "-"
%token MUL "*"
%token DIV "/"
%token COMMA ","
%token LPAR "("
%token RPAR ")"

%type <Expression> E, E1, E2, E3, E4, E5

%start P

%%

P : E EOF						{ Program = $1; }

E : "let" ID "=" E "in" E		{ $$ = new LetExpression($2, $4, $6); }
// Error: Syntax error, unexpected anchoredSymbol
// ----------------------------------------------
  | "let" ID ID "=" E "in" E    { $$ = new LetRecExpression($2, $3, $5, $7); }
  | E1							{ $$ = $1; }
  ;

E1: E1 "," E2					{ $$ = new SequenceExpression($1, $3); }
  | E2							{ $$ = $1; }
  ;

E2: E2 "+" E3					{ $$ = new BinaryOperatorExpression(BinaryOperator.Add, $1, $3); }
  | E2 "-" E3					{ $$ = new BinaryOperatorExpression(BinaryOperator.Sub, $1, $3); }
  | E3							{ $$ = $1; }
  ;

E3: E3 "*" E4					{ $$ = new BinaryOperatorExpression(BinaryOperator.Mul, $1, $3); }
  | E3 "/" E4					{ $$ = new BinaryOperatorExpression(BinaryOperator.Div, $1, $3); }
  | E4							{ $$ = $1; }
  ;

E4: ID E5					    { $$ = new ApplicationExpression($1, $2); }
  | E5							{ $$ = $1; }
  ;

E5: "(" E ")"					{ $$ = $2; }
  | ID							{ $$ = new VariableExpression($1); }
  | NUM							{ $$ = new NumberExpression($1); }
  ;

%%

public Expression Program;

public Parser(Scanner s) : base(s) { }// ==========================================================================

